# -*- coding: utf-8 -*-
"""Lesson2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IQFyfSwqeLzVH4M8VXgUMsbdhvnRetT-
"""

import torch
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


print(torch.__version__)

"""## Introduction to Tensors"""

scalar= torch.tensor(7)

scalar

scalar.ndim

"""only for scalar does item work"""

scalar.item()

vector = torch.tensor([7,6])

vector

"""how many square bracket is the dimension of tensor"""

vector.ndim

vector.shape

vector[1]

#TENSORS
#this is shape
TENSOR = torch.tensor([[[1,2],[4,5],[7,8]]])
#torch.Size([1, 3, 2])
#[[[1,2],[4,5],[7,8]]]<-----this bracket has 1 element
#[[1,2],[4,5],[7,8]]<----- this bracket has 3 elements
#all the elements inside the last bracket has 2 elements

TENSOR

TENSOR.shape

TENSOR.ndim

"""RANDOM TENSORS

"""

random_tensor= torch.rand(1,3,2)
 random_tensor

random_image_size_tensor= torch.rand(size=(3,224,224))
random_image_size_tensor.shape,random_image_size_tensor.ndim

"""Tensors of 0 and 1s"""

zero = torch.zeros(size=(3,4))
zero

ones = torch.ones(3,4)

ones

ones.dtype

"""Creating a range of tensore and tensors like"""

torch.arange(0,10)

range = torch.arange(0,100,10)

range

#tensor like
ten_zeroes = torch.zeros_like(range)

ten_zeroes

"""Tensor data types


Note: Tensor datatypes are one of 3 big issues we run into in pytorch and data science

1.Tensor not right datatype

2.Tensor not right shape

3.Tensor not on the right device
"""

float_tensor = torch.tensor([3,6,9],
                            dtype=None,#data type in tensor
                            device=None,#device tensor is on, diffrent tensor in different device cause issue
                            requires_grad=False)#whether or not to track gradients with this tensors operation

float

float_tensor

float_16_tensor = float_tensor.type(torch.float16)

float_16_tensor

float_16_tensor*float_tensor

"""Lesson 2"""

int_32_tensor = torch.tensor([3,6,9],dtype=torch.int32)

int_32_tensor

float_tensor*int_32_tensor

"""Getting information from tensors

1.Tensor not right datatype- to get datatype from a tensor, use tensor.dtype

2.Tensor not right shape- to get shape, use tensor.shape

3.Tensor not on the right device- to get device from a tensor, use tensor.device
"""

some_tensor = torch.rand(3,4)

some_tensor

"""Finding out details about the tensors"""

some_tensor.dtype

some_tensor.shape

some_tensor.device

"""Manipulation Tensors (Tensor operations)

Tensor operations include:

1. Addition

2. Subtraction

3. Multiplication (element wise)

4. Division

5. Matrix multiplication
"""

new_tensor= torch.tensor([1,2,3])
new_tensor+10

new_tensor*10

new_tensor-10

#in built multipy function
 torch.mul(new_tensor,10)

torch.add(new_tensor,10)

"""2 main ways of performing multiplication in neural network and deep learning

1. Element wise multiplication

2. Matrix multiplication

There are two main rules that performing matrix mutliplication needs to satisfy:

1. The inner dimensions must match

  * (3,2) @ (2,3) wont work

  * (2,3) @ (3,2) will work

  * (3,2) @ (2,3) will work

2. The resulting matrix have the shape of the outer matrix




"""

#Element wise multiplication
tensor = torch.tensor([2,3,4])
tensor

element_wise_multiplicaton = tensor*tensor
element_wise_multiplicaton

matrix_wise_multiplication = torch.matmul(tensor,tensor)
matrix_wise_multiplication

new_matrix= torch.mm(torch.rand(2,3),torch.rand(3,4)) #mm is same as matmul

new_matrix

"""One of the most common errors in deep learning: Shape errors

To fix the tensor shape issues, we can manipulate the shape of one of our tensors using a transpose


"""

tensor_A = torch.rand(3,4)
tensor_A,tensor_A.shape

tensor_A.T,tensor_A.T.shape

